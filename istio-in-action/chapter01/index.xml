<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter01 on 《istio in action》 实践指南</title><link>https://tangx.in/books/istio-in-action/chapter01/</link><description>Recent content in Chapter01 on 《istio in action》 实践指南</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://tangx.in/books/istio-in-action/chapter01/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://tangx.in/books/istio-in-action/chapter01/01-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/istio-in-action/chapter01/01-install/</guid><description>安装 docker-k3s-istio 开发环境 1. 安装 docker 配置 docker 加速仓库
{ &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://mirror.ccs.tencentyun.com&amp;#34;, &amp;#34;https://wlzfs4t4.mirror.aliyuncs.com&amp;#34; ], &amp;#34;bip&amp;#34;: &amp;#34;169.253.32.1/24&amp;#34; } 上述是腾讯云和阿里云的加速仓库， 根据需求自行调整。
2. 安装 k3s 2.1 安装 k3s k3s 使用 --docker 模式是为了方便 docker build 产生的镜像可以直接用在 k3s 中。 否则在 k3s 和 docker 各自使用自己的 containerd runtime， 在程序发布的时候还需要再实现一个镜像 push 和 pull。 麻烦
仅用 --disable=traefik 其一是为了保证集群的干净， 只有一个 ingress 控制器。 其二是 traefik 和 istio 默认都使用 LB 控制器， 会抢占 80/443 端口。 直接禁用，懒得再卸载。</description></item><item><title/><link>https://tangx.in/books/istio-in-action/chapter01/02-initial-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/istio-in-action/chapter01/02-initial-project/</guid><description>初始化第一个项目 项目代码在 https://github.com/tangx/istio-in-action 命令中有很多快捷键， 参考 install and prepare 1. 创建 namespace 并开启整体 istio 注入 1.1 创建 namespace myistio kc ns myistio namespace/myistio created kns myistio Context &amp;#34;default&amp;#34; modified. Active namespace is &amp;#34;myistio&amp;#34;. 1.2 向 namespace 中开启 istio 注入 # 向 ns 加入标签 istio-injection=enabled ， 开启注入 kubectl label namespace myistio istio-injection=enabled namespace/myistio labeleds # 查看具有 istio-injection 标签的 ns kgall ns -L istio-injection NAME STATUS AGE ISTIO-INJECTION kube-system Active 42d kube-public Active 42d istio-system Active 10m myistio Active 11s enabled default Active 42d 2.</description></item><item><title/><link>https://tangx.in/books/istio-in-action/chapter01/07-upgrade-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/istio-in-action/chapter01/07-upgrade-project/</guid><description>升级项目 之前的项目中只有 prod 服务，具有版本的区分。 现在对项目进行一些升级， 模拟一个多服务的项目。
两个服务， review / prod 服务之前还有调用关系。 prod -&amp;gt; review review 这次新加入了 review 评论服务。
{ &amp;quot;1&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;zhangsan&amp;quot;, &amp;quot;commment&amp;quot;: &amp;quot;istio 功能很强大， 就是配置太麻烦&amp;quot; }, &amp;quot;2&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;wangwu&amp;quot;, &amp;quot;commment&amp;quot;: &amp;quot;《istio in action》 真是一本了不起的书&amp;quot; } } prod 升级 prod 服务， 除了之前返回本身的数据信息之外，还需要返回关联的评论信息。
type Product struct { Name string Price int Reviews interface{} // 评论信息 } 这部分评论信息的来源就是上面新添加的评论服务。</description></item><item><title/><link>https://tangx.in/books/istio-in-action/chapter01/16-lego-create-server-certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/istio-in-action/chapter01/16-lego-create-server-certificate/</guid><description>使用 lego 创建 https 证书 https://go-acme.github.io/lego/dns/
#!/bin/bash # cd $(dirname $0) source .env lego --email=&amp;#34;${EMAIL}&amp;#34; \ --key-type rsa2048 \ --domains=&amp;#34;${DOMAIN1}&amp;#34; \ --path=$(pwd) --dns $DNS_PROVIDER --accept-tos run</description></item></channel></rss>