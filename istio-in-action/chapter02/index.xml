<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter02 on 《istio in action》 实践指南</title><link>https://books.tangx.in/istio-in-action/chapter02/</link><description>Recent content in Chapter02 on 《istio in action》 实践指南</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://books.tangx.in/istio-in-action/chapter02/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/03-vs-and-ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/03-vs-and-ingress/</guid><description>isti VirtualService 和 k8s Ingress 可以简单的认为 Ingress 是 k8s 中提出的流量入口转发的一个 标准定义规范（只是认为）。 怎么实现， 需要根据不同的 IngressController 的逻辑。
VirtualService 的部分功能就承担了 Ingress 的这一功能。
1. Ingress 与 VirtualService 的定义 k8s Ingress 配置
apiVersion:networking.k8s.io/v1kind:Ingressmetadata:creationTimestamp:nullname:simplespec:rules:- host:foo.com # 访问的域名http:paths:- backend:service:name:svc1 # 后端服务名称port:number:80path:/bar # 匹配的路由pathType:Exact # 匹配模式对应的 istio virtual service 配置如下
apiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:vs-prodsnamespace:myistiospec:hosts:- svc-prod # 访问地址http:- route:- destination:host:svc-prod # 后端服务名称可以看到， VirtualService 的配置大致与 Ingress 相似。 这里 VS 中没有指定 path 规则， 将在以后路由转发中提到。
https://istio.io/latest/zh/docs/concepts/traffic-management/#the-hosts-field</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/04-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/04-gateway/</guid><description>使用 istio Gateway 允许外部访问 仅仅是简单的创建了 VirtualService 是不能实现集群外部的访问的。
在 Istio 中， 还有一个 Gateway 的概念。 顾名思义， Gateway 就是大门保安， 只允许具有特定特征的流量通过。
1.1. 创建 Gateway 先来创建一个 Gateway
---# https://istio.io/latest/docs/reference/config/networking/gateway/apiVersion:networking.istio.io/v1alpha3kind:Gatewaymetadata:name:istio-tangx-innamespace:myistiospec:selector:istio:ingressgateway# 选择 ingressgateway, 省略则兼容所有servers:- port:number:80name:httpprotocol:HTTPhosts:# - myistio/istio.tangx.in # 只针对特定的 namespace myistio 有效- istio.tangx.in# 所有 ns 都有效上述 gateway 注意以下几点。
使用 .spec.selector 选择了绑定的 ingressgateway。 如果 省略 则绑定到所有的 ingressgateway。 kgall deployment -l istio=ingressgateway NAMESPACE NAME READY UP-TO-DATE AVAILABLE AGE istio-system istio-ingressgateway 1/1 1 1 3d23h .</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/05-vs-http-rewrite-by-uri/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/05-vs-http-rewrite-by-uri/</guid><description>VirtualService 使用路径重写 有了 VirtualService 的路径重写功能后， 就更符合 Ingress 的标准定义了。
但 VirtualService 不仅仅如此， 路径重写包含了三种方式
prefix: 前缀匹配。 只要 uri 路径的 前段 匹配则转发。 后端 自动补齐。 exact: 精确匹配。 只有 uri 全部 匹配才转发， 并且只能转发某一个固定地址。 精确匹配 regex: 正则匹配。 只有 uri 全部路径 满足正则规则 才转发。 正则规则: https://github.com/google/re2/wiki/Syntax 精确匹配， 正则模式也是精确匹配目标路径。 补充: 关于正则匹配模式官网资料也很少。
# https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPRewrite---apiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:vs-prodnamespace:myistiospec:gateways:- istio-tangx-inhosts:- svc-prod- istio.tangx.inhttp:- name:&amp;#34;prefix-match&amp;#34;# 规则名称match:- uri:prefix:&amp;#34;/p1&amp;#34;# 新路径, prefix 前缀匹配， 满足 /p1 的都要被重写rewrite:uri:&amp;#34;/prod&amp;#34;# 老路径route:- destination:host:svc-prod # 后端服务- name:&amp;#34;exact-match&amp;#34;match:- uri:exact:&amp;#34;/p2-list&amp;#34;# 新路径， exact 精确匹配， 只能满足 /p2-listrewrite:uri:&amp;#34;/prod/list&amp;#34;# 精确匹配route:- destination:host:svc-prod- name:&amp;#34;regex-match&amp;#34;match:- uri:regex:&amp;#34;/pr[1-3]/.</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/06-dr-subset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/06-dr-subset/</guid><description>使用 DestinationRule Subset 进行路由分组(版本控制) 当一个程序并行发布多个版本的时候， 如 prod-v1 / prod-v2
kgd NAME READY UP-TO-DATE AVAILABLE AGE toolbox 1/1 1 1 3d22h prod-v1 1/1 1 1 16m prod-v2 1/1 1 1 16m // 两个版本的测试结果， 仅定义为 version 不一致 { &amp;quot;data&amp;quot;: { &amp;quot;Name&amp;quot;: &amp;quot;istio in action&amp;quot;, &amp;quot;Price&amp;quot;: 300, &amp;quot;Reviews&amp;quot;: null }, &amp;quot;version&amp;quot;: &amp;quot;v2.0.0&amp;quot; // &amp;quot;version&amp;quot;: &amp;quot;v1.0.0&amp;quot; } k8s Service 依旧实现最根本的 服务级别的 Selector。
---# ServiceapiVersion:v1kind:Servicemetadata:labels:app:prodname:svc-prodnamespace:myistiospec:ports:- name:80-8080port:80protocol:TCPtargetPort:8080selector:app:prodtype:ClusterIP默认情况下会根据 VirtualService 的默认规则 轮询 到后端的所有服务。
使用 subset 实现路由控制 但是在一些特定的环境下，需要对路由或者流量进行精确的认为控制。 这个时候就需要对后端服务进行 分组 处理。</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/08-vs-http-rewrite-by-header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/08-vs-http-rewrite-by-header/</guid><description>VirtualService 使用 header 重写路由 在 istio 中， 除了 path 之外还可以使用 Header 进行路由规则管理。
为了更好的展示 header 路由效果， 这里配合使用了 uri 的精确匹配模式。 实现之后， 只能访问地址 http://istio.tangx.in/ ， 其他均为 404。 具体哪个服务应答， 完全根据 header 匹配选择。
效果如下:
使用 Header 匹配有几个必要条件
Header 的 key 只能包含 小写字母 和 连字符 -。 从实际测试中来看。 这个规则只是一个 建议。 使用 驼峰(SrvReview) 时依旧可以转发。 Header 的 value 大小写敏感。 如果 Header 的值为 空， 则只检测 key 是否存在。 将 key 的匹配 值 设置为 空。 prefix, exact, regex 模式均可。 https://istio.</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/10-vs-http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/10-vs-http-redirect/</guid><description>VirtualService 路由重定向 在 VirtualService 配置中， 除了 http rewrite 路由重写之外， 还有 http redirect 路由重定向。 即常说的 30x。
https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPRedirect
http redirect VirtualService 重定向配置如下。 有三个重要参数
uri: 重定向后的 uri redirectCode: 重定向时的 http response code。 ex: 301, 302。 默认值为 301 。 authority: 重定向后的 http host。 即 http response header 中的 location 字段。 ---apiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:review-http-redirectnamespace:myistiospec:gateways:- istio-tangx-inhosts:- svc-review- istio.tangx.inhttp:- match:- uri:exact:/reviewredirect:uri:/review/allredirectCode:302authority:svc-review # 重定向后的地址。使用 curl 命令请求测试， 结果如下。
curl -I http://istio.</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/11-vs-http-retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/11-vs-http-retry/</guid><description>VirtualService 重试机制 在 Istio VirtualService 中， 有一个很关键的机制： 重试。
发起重试不需要业务本身实现， 而是 istio 通过 envoy 发起的。
其中有几个关键参数
attempts: 重试次数（不含初始请求）， 即最大请求次数为 n+1。
perTryTimeout: 发起重试的间隔时间。
必须大于 1ms。 默认于 http route 中的 timeout 一致， 即无 timeout 时间 retryOn: 执行重试的触发条件。
条件值有 envoy 提供: https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on http retry ---apiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:review-http-redirectnamespace:myistiospec:gateways:- istio-tangx-inhosts:- svc-review- istio.tangx.inhttp:- match:- uri:prefix:/route:- destination:host:svc-reviewretries:# 重试attempts:3# 重试次数（不含本身一次）， 共计 4 次。perTryTimeout:2s# 间隔时间， 默认 25ms。必须大于 1msretryOn:gateway-error,connect-failure,refused-stream# 触发条件测试 部署用例 11 进行测试。</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/12-vs-http-fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/12-vs-http-fault-injection/</guid><description>VirtualService 混沌测试/错误注入 在 Istio 中还实现了一个很重要的功能: 错误注入。 可以设置 一定几率 出现 延迟(delay) 和 中止(abort) 错误。
Http Fault Injection Delay 延迟 一定概率出现 缓慢 相应。
fixedDelay: 延迟时间。 格式 1h / 1m / 1s。 最小 1ms。 percentage: 错误触发几率。 0-100 之间。 可以为 double 类型的小数。 ---# fault injectionapiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:review-fault-injectionspec:hosts:- svc-reviewhttp:- match:route:- destination:host:svc-reviewfault:delay:percentage:value:50fixedDelay:5sHttp Fault Injection Abort 中止 一定概率出现 中止 相应， 并返回错误响应 http code
httpStatus: 错误响应 http code。 percentage: 错误触发几率。 0-100 之间。 可以为 double 类型的小数。 ---# fault injectionapiVersion:networking.</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/13-vs-http-delegate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/13-vs-http-delegate/</guid><description>VirtualService 服务委托 服务委托就是流量转发。
https://istio.io/latest/docs/reference/config/networking/virtual-service/#Delegate
如下 VirtualService 的 流量委托 定义， 是在 myistio 这个命名空间中创建的。 但是将 myistio.tangx.in/prod 的流量转发到了命名空间 myistio-prod 中的 prod 服务中； 同样将 myistio.tangx.in/reviews 的流量转发到了命名空间 myistio-review 中的 review 服务中。
# vs http delegateapiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:vs-delegatenamespace:myistio# 注意 namespacespec:gateways:- istio-tangx-inhosts:- istio.tangx.inhttp:- match:- uri:prefix:&amp;#34;/prod&amp;#34;delegate:name:vs-prod # vs namenamespace:myistio-prod- match:- uri:prefix:&amp;#34;/review&amp;#34;delegate:name:vs-review # vs namenamespace:myistio-review需要注意 被委托对象 必须是 VirtualService 对象， 例如 myistio-prod 命名空间中的 vs-prod 对象
---# vs prodapiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:vs-prodnamespace:myistio-prod# 注意 namespacespec:# hosts: # 这里不能设置 hosts， 即使是对外暴露的相同域名也不行,# 否则可能出现 404 # - myistio.</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/14-vs-http-header-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/14-vs-http-header-operation/</guid><description>VirtualService Header 操作 当 Envoy 在进行请求流量转发的时候， 还可以对消息 (request/response) 的 Header 进行操作。
set : 如果不存在， 则 创建 header， 如果存在， 则 覆盖 header spec:http:- headers:request:set:key1:value1key2:value2add : 如果不存在， 则 新增； 如果村子啊， 则 追加 spec:http:- headers:request:add:key1:value1key2:value2remove: 如果存在， 则 删除 header; 不存在, 则 忽略 spec:http:- headers:request:remove:- key1- key2测试用例 创建 vs-review 配置如下， 对 header reqeust 更新/追加/删除 进行操作。
---# vs reviewapiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:vs-reviewnamespace:myistio# 注意 namespacespec:gateways:- istio-tangx-inhosts:- istio.tangx.in- svc-reviewhttp:# header 操作- name:&amp;#34;header-operation&amp;#34;headers:# request header 操作与 route 在一层request:set:# 更新header-injection:&amp;#34;anything&amp;#34;add:# 追加header-add-not-exist:&amp;#34;not-exist&amp;#34;header-add-exist:&amp;#34;if-overwrite&amp;#34;remove:# 删除- header-should-remove- &amp;#34;header-should-remove2&amp;#34;更新 review， 向 response 中添加所有 request 的 header</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/17-gw-https-support-standard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/17-gw-https-support-standard/</guid><description>Gateway 支持 https 访问 - 标准模式 https://istio.io/latest/docs/reference/config/networking/gateway/#ServerTLSSettings
credentialName: The secret (of type generic) should contain the following keys and values: key: &amp;lt;privateKey&amp;gt; and cert: &amp;lt;serverCert&amp;gt;
创建证书 k8s secret 在 标准模式 下， 必须使用 key 作为私钥文件名， cert 作为证书文件名。 证书文件需要 保持 与 istio-ingressgateway 服务在 相同 的命名空间。 因此证书文件的创建命令如下
kubectl create secret generic wild-tangx-in \ --from-file=key=./certificates/_.tangx.in.key \ --from-file=cert=./certificates/_.tangx.in.crt \ -n istio-system 其中</description></item><item><title/><link>https://books.tangx.in/istio-in-action/chapter02/18-dr-simple-loadbalance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/istio-in-action/chapter02/18-dr-simple-loadbalance/</guid><description>使用 DestionationRule 流量控制策略 - 简单负载均衡 简单负载均衡 策略， 官方指定名称。
ROUND_ROBIN: 轮训策略， 默认。 LEAST_CONN: 最小连接数。 随机 选择 两个健康 后端， 通过 O(1) 算法选择连接数最少的后端。 RANDOM: 随机选择了一个 健康 后端。 如果 没有配置健康检查策略， 随机策略比轮训更好。 PASSTHROUGH: 此选项会将连接转发到调用者请求的原始 IP 地址，而不进行任何形式的负载平衡。必须谨慎使用此选项。它适用于高级用例。有关更多详细信息，请参阅 Envoy 中的原始目标负载均衡器。 ---apiVersion:networking.istio.io/v1alpha3kind:VirtualServicemetadata:name:vs-prodnamespace:myistiospec:gateways:- istio-tangx-inhosts:- svc-prod- istio.tangx.inhttp:- name:&amp;#34;v1-subset&amp;#34;route:- destination:host:svc-prod---apiVersion:networking.istio.io/v1alpha3kind:DestinationRulemetadata:name:dr-prodspec:host:svc-prodtrafficPolicy:loadBalancer:# simple: RANDOMsimple:ROUND_ROBIN# simple: PASSTHROUGH# simple: LEAST_CONN部署测试 ka -f istio-samples/18-dr-simple-loadbalance 10000 次请求， 2个后端， 差别不是很大
root@toolbox-54f88c8c95-82f4p:/tmp# ./18-dr-simple-loadbalance PASSTHROUGH v2.0.0 =&amp;gt; 5227 次 v1.0.0 =&amp;gt; 4772 次 root@toolbox-54f88c8c95-82f4p:/tmp# .</description></item></channel></rss>