<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>3. Redux-Router 案例: 账本 on React18</title><link>https://typonotes.com/books/react/demos/account-book/</link><description>Recent content in 3. Redux-Router 案例: 账本 on React18</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/demos/account-book/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://typonotes.com/books/react/demos/account-book/data-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/data-analysis/</guid><description>1. lodash 根据时间分组数据 安装
$ npm install lodash 分组数据
const newList = lodash.groupBy(billList, (item) =&amp;gt; { return dayjs(item.date).format(&amp;#39;YYYY-MM&amp;#39;) }) console.log(&amp;#34;newList&amp;#34;, newList) 2. useMemo 缓存数据 useMemo 用于缓存数据， 依赖数据变化时， 才会重新计算。 类似 vue 中的 computed 用法与 useEffect 类似， 但是 useEffect 是用于处理副作用的， useMemo 是用于缓存数据的 // 获取原始数据 billList const { billList } = useSelector(state =&amp;gt; state.bill) const monthGroup = useMemo( // 计算函数 // 不需要传入参数， 因为依赖项已经在外部声明 // 错误示范 (billList)=&amp;gt;{return billList} () =&amp;gt; { // return billList return lodash.</description></item><item><title>01. 使用 @ 路径别名</title><link>https://typonotes.com/books/react/demos/account-book/pash-alias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/pash-alias/</guid><description>注意： 非注释行 是新添加的。
// import { defineConfig } from &amp;#39;vite&amp;#39; // import react from &amp;#39;@vitejs/plugin-react&amp;#39; import path from &amp;#39;path&amp;#39; // https://vitejs.dev/config/ export default defineConfig({ // plugins: [react()], resolve: { alias: { // @ =&amp;gt; src &amp;#34;@&amp;#34;: path.resolve(__dirname, &amp;#34;src&amp;#34;) }, }, }) 当然还可以添加更多， https://typonotes.com/posts/2021/09/28/vue3-with-alias-path/</description></item><item><title>01. 初始化</title><link>https://typonotes.com/books/react/demos/account-book/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/setup/</guid><description>这个 demo 不要随意发挥， 尤其是在命名上。 因为有很多 格式代码 要直接复制课件。
1. 使用 npm vite 创建项目 $ npm create vite@latest # React -&amp;gt; JavaScript 2. 安装依赖插件 2.1. sass $ npm install sass --save 2.2. axios $ npm install axios --save 2.3. 3. 使用 JsonServer 模拟数据 $ json-server --port 8888 /src/server/data/data/json 3.</description></item><item><title>02. 初始化 route</title><link>https://typonotes.com/books/react/demos/account-book/route/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/route/</guid><description>安装 react-route npm install react-router-dom 创建目录结构 tree . ├── components │ ├── Layout │ │ ├── Month │ │ │ └── index.jsx │ │ ├── Year │ │ │ └── index.jsx │ │ └── index.jsx │ └── New │ └── index.jsx 在 /src/routes/index.jsx 因为要写标签， 一定要用 jsx 中， 创建路由 import { createBrowserRouter } from &amp;#34;react-router-dom&amp;#34;; import Layout from &amp;#34;../components/Layout&amp;#34;; import Month from &amp;#34;../components/Layout/Month&amp;#34;; import Year from &amp;#34;../components/Layout/Year&amp;#34;; import New from &amp;#34;.</description></item><item><title>03. 使用 redux 管理数据</title><link>https://typonotes.com/books/react/demos/account-book/redux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/redux/</guid><description>1. 安装 redux 和 toolskit $ npm install @reduxjs/toolkit react-redux 2. 初始化 redux store 在 /src/demos/AccountBook/src/store/modules/billStore/index.js 中 使用 createSlice 创建 billStore 初始化 name, initialState, reducers 默认导出 billStore.reduer 创建同步 action setBillList 创建异步 action getBillList， 并从 json-server 中获取数据 导出 getBillList。 在 /src/demos/AccountBook/src/store/index.js 中 使用 configureStore 创建 store 导入 billStore.reduer。 再导入 store.reducer 中， 并指定为 bill。 默认导出 store 在 /src/demos/AccountBook/src/demos/AccountBook/src/App.</description></item><item><title>04. andD-mobile 主题</title><link>https://typonotes.com/books/react/demos/account-book/antd-mobile-theme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/antd-mobile-theme/</guid><description>And Design Mobile 是一个 移动端 的样式库
1. 安装 $ npm install --save antd-mobile # or $ yarn add antd-mobile 2. 使用 import { Button } from &amp;#39;antd-mobile&amp;#39; // 组件按钮 &amp;lt;Button type=&amp;#34;primary&amp;#34;&amp;gt;点我+1&amp;lt;/Button&amp;gt; // 原生按钮 &amp;lt;button&amp;gt;点我+1&amp;lt;/button&amp;gt; 3. 主题定制 全局定制: 整个应用范围 内的所有组件都生效 /* 蓝色 */ :root:root { --adm-color-primary: #006DFD; } 局部定制: 只有在某些元素 内部生效。 /* 紫色 */ .purple-theme { --adm-color-primary: #9E53D4; }</description></item><item><title>05. TabBar</title><link>https://typonotes.com/books/react/demos/account-book/tabbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/tabbar/</guid><description>官网文档 TabBar
1. 准备工作 从课件中复制 TabBar 的 index.jsx 和 index.scss 到 /src/demos/AccountBook/src/components/Layout 中
2. 切换路由 注意 看文档， 可能不同的样式库有不同的实现方式。
路由切换是在 TabBar 的 onChange 事件实现的。 而非在 TabBar.Item 中的 onClick 中实现。 import { useNavigate } from &amp;#39;react-router-dom&amp;#39; const Layout = () =&amp;gt; { const navigate = useNavigate() // 切换路由 const switchRouteActive = (path) =&amp;gt; { navigate(path) } // 返回 return ( &amp;lt;TabBar onChange={path =&amp;gt; switchRouteActive(path)}&amp;gt; {/* &amp;lt;TabBar onChange={path =&amp;gt; useNavigate(path)}&amp;gt; // 可行*/} {tabs.</description></item><item><title>06. 事件选择器</title><link>https://typonotes.com/books/react/demos/account-book/date-picker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/account-book/date-picker/</guid><description>1. 管理时间选择器状态 1.1. 使用 useState 管理时间选择器状态 const [dateVisable, setDateVisable] = useState(false) 1.2. 点击箭头展开时选择器 使用onClick 事件 打开时间选择器控件 使用 classNames 控制箭头显示状态 &amp;lt;div className=&amp;#34;date&amp;#34; // 打开时间选择器 onClick={() =&amp;gt; setDateVisable(true)}&amp;gt; {/* &amp;lt;span className=&amp;#39;arrow expand&amp;#39;&amp;gt;&amp;lt;/span&amp;gt; */} {/* 错误示范 */} {/* &amp;lt;span className=classNames={&amp;#39;arrow&amp;#39;, &amp;#39;expand&amp;#39;}&amp;gt;&amp;lt;/span&amp;gt; */} {/* 正确示范: classNames 是一个函数， 需要在外层 {} 开启 jsx 语法 */} &amp;lt;span className={classNames( &amp;#39;arrow&amp;#39;, { &amp;#39;expand&amp;#39;: dateVisable })}&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; 1.</description></item></channel></rss>