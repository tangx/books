<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>redux on React18</title><link>https://typonotes.com/books/react/library/redux/</link><description>Recent content in redux on React18</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/library/redux/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Redux计数器（纯网页版）</title><link>https://typonotes.com/books/react/library/redux/counter-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/library/redux/counter-demo/</guid><description>在不使用 React 框架的情况下。 仅使用 Redux 实现一个计数器功能。
使用步骤 定义一个 reducer 函数。 （根据当前想要做的修改返回一个心的状态） 使用 createStore 方法传入 reducer， 生成一个 store 实例对象 使用 store 实例的 subscribe 方法 订阅数据变化。 （数据一旦变化， 可以得到通知） 使用 store 实例的 dispatch 方法提交 action 对象 触发数据变化。 （告诉 reducer 所需要执行的操作） 使用 store 实例 getState 方法 获取最新的状态数据， 并更新到试图中。 注意： Redux 不会主动更新视图， 需要主动调用 document DOM 绑定数据。
示例代码 本案例中使用 redux@4.2.1， 最新版本 5.0.x API 有新变化， 页面代码不兼容。 （2024-02-18）</description></item><item><title>2. Redux 与 React - 环境准备</title><link>https://typonotes.com/books/react/library/redux/redux-react-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/library/redux/redux-react-setup/</guid><description>官方要求安装两个其他插件
Redux Toolkit (RTK): 官方推荐编写 Redux 逻辑的方式， 是一套工具的集合， 可以 简化书写方式
简化 store 的配置 内置 immer 支持可变状态的修改 内置 thunk 更好的支持 异步创建 react-redux: 用于 链接 Redux 和 React 的中间件
1. 插件安装 $ npm install @reduxjs/toolkit react-redux 安装后可以在 package.json 中查看版本。
&amp;#34;dependencies&amp;#34;: { &amp;#34;@reduxjs/toolkit&amp;#34;: &amp;#34;^2.2.1&amp;#34;, &amp;#34;react-redux&amp;#34;: &amp;#34;^9.1.0&amp;#34;, }, 比 教学视频 的版本高。 (2024-02-20)
&amp;#34;dependencies&amp;#34;: { &amp;#34;@reduxjs/toolkit&amp;#34;: &amp;#34;^1.9.3&amp;#34;, &amp;#34;react-redux&amp;#34;: &amp;#34;^8.0.5&amp;#34;, }, 2. store 目录结构设计 创建 /src/store 根目录，</description></item><item><title>3. Redux 与 React - 实现 Counter(同步)</title><link>https://typonotes.com/books/react/library/redux/redux-react-counter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/library/redux/redux-react-counter/</guid><description>先来看一张 Redux 与 React 调用全图。
全图左右两个部分， 中间使用 store 关联起来。 左边使用 @reduxjs@toolkit 创建 reducer 管理 store. 右边使用 react-redux 获取数据并修改。 1. 创建 Slice 并初始化 counterReducer 在 /src/store/modules/counterStore.js 创建 reducer 和 actions
从 @reduxjs/toolkit 中导入并使用 createSlice 创建 通过 counterSlice.reducer 获取 reducer 并导出。 在 index.js 中引用， 创建 合并reducer 通过 counterSlice.actions 获取 actions 并导出。 在外部代码引用， 使用 useDispatch 调用修改 state 的值。 import { createSlice } from &amp;#39;@reduxjs/toolkit&amp;#39;; const counterSlice = createSlice({ // 设置名称 name: &amp;#39;counter&amp;#39;, // 设置初始状态 state initialState: { value: 0, }, // 设置修改方法 actions reducers: { increment: (state) =&amp;gt; { state.</description></item></channel></rss>