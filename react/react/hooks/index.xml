<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4. Hooks on React18</title><link>https://typonotes.com/books/react/react/hooks/</link><description>Recent content in 4. Hooks on React18</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/react/hooks/index.xml" rel="self" type="application/rss+xml"/><item><title>useContext 数据传递</title><link>https://typonotes.com/books/react/react/hooks/use-context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-context/</guid><description/></item><item><title>useEffect 生命周期管理</title><link>https://typonotes.com/books/react/react/hooks/use-effect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-effect/</guid><description>Lifecycle of Reactive Effects 深入详解React生命周期 useEffect 是一个 React Hook 函数， 用于在 React 组件中创建 不是由事件引起 而是 由渲染本身引起的操作， 比如 ajax 请求， 更改 DOM 等等
说明： 上面的组件中没有发生任何的 用户事件， 组件渲染完毕之后 就向服务器请求数据， 整个过程数据 只由渲染引起的操作。
触发时机包括：
加载 重新渲染 卸载 1. 语法规则 import { useEffect } from &amp;#39;react&amp;#39; useEffect(()=&amp;gt;{}, []) useEffect 支持两个参数
参数一是 函数 ()=&amp;gt;{}。 可以称其为 副作用函数， 在函数内部可以放置要执行的操作。
如果函数由返回值， 则表示在 组件卸载时执行 参数二是 数组 []（可选）， 在数组里放置 依赖项。 不同状态 的数组影响第一参数函数的执行。</description></item><item><title>useImmer 状态数据</title><link>https://typonotes.com/books/react/react/hooks/use-immer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-immer/</guid><description>useImmer 是 useState 的 加强版。
https://github.com/immerjs/use-immer npm install immer use-immer</description></item><item><title>useRef 获取 DOM</title><link>https://typonotes.com/books/react/react/hooks/use-ref/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-ref/</guid><description>在 React 中 获取/操作 DOM， 需要使用 useRef 钩子函数
import { useRef } from &amp;#39;react&amp;#39;; export default function UseRef() { // 1. 使用 useRef 生成 ref 对象 const inputRef = useRef(null); function showDOM() { // 使用 console.log 查看 ref 对象 console.log(inputRef.current); // 使用 console.dir 展开 ref 对象 console.dir(inputRef.current); // 焦点锁定 inputRef.current.focus() } return ( &amp;lt;div&amp;gt; &amp;lt;h3&amp;gt;3. useRef 获取 DOM&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;点击 Button 在控制台查看输出&amp;lt;/p&amp;gt; {/* 将 ref 绑定到标签属性上 */} &amp;lt;input type=&amp;#34;text&amp;#34; ref={inputRef} /&amp;gt; {/* 3.</description></item><item><title>useState 状态数据</title><link>https://typonotes.com/books/react/react/hooks/use-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-state/</guid><description>React 讲究的是 数据驱动页面。 意思是 当状态数据被修改了，页面内容也会被重新渲染更新。
如果要上述这个效果， 就需要用到 useState 这个 钩子(Hook)
使用 useState 时， 需要先导入。 import { useState } from &amp;#34;react&amp;#34; 使用 const/let 进行结构赋值。 count 和 setCount 是一对 3. useState 创建 状态， 并定义变量的默认值。 count 被称为状态变量，不应该被直接修改， 推荐使用 const 初始化 setCount 是一个函数, 修改 count 的函数。 通过 setCount 修改 count 的值，会触发相关组件的重新渲染。 // const: count 不能被修改 const [count, setCount] = useState(0) // let: count 可以被修改 let [count, setCount] = useState(0) 注意: 使用 let 定义时， count 非只读， 可以直接修改。 但不会触发组件的重新渲染。</description></item></channel></rss>