<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter01 on k8sailor: 自己写一个 Kubernetes 控制台</title><link>https://books.tangx.in/k8sailor/chapter01/</link><description>Recent content in Chapter01 on k8sailor: 自己写一个 Kubernetes 控制台</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://books.tangx.in/k8sailor/chapter01/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://books.tangx.in/k8sailor/chapter01/01-install-k3s-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/k8sailor/chapter01/01-install-k3s-cluster/</guid><description>搭建 k3s 集群 安装 k3s 安装过程参考
https://tangx.in/2021/06/07/k3s-architecture-single-server/
k3s 集群版本为 v1.21.4。 因此 k8s client-go sdk 的版本也需要安装对应版本
# curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh - [INFO] Finding release for channel stable [INFO] Using v1.21.4+k3s1 as release [INFO] Downloading hash http://rancher-mirror.cnrancher.com/k3s/v1.21.4-k3s1/sha256sum-amd64.txt [INFO] Downloading binary http://rancher-mirror.cnrancher.com/k3s/v1.21.4-k3s1/k3s [INFO] Verifying binary download [INFO] Installing k3s to /usr/local/bin/k3s ... 省略 初始化环境 通过命令创建一些工作负载， 以便后续 k8s api 调用查看</description></item><item><title/><link>https://books.tangx.in/k8sailor/chapter01/02-design-cobra-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/k8sailor/chapter01/02-design-cobra-command/</guid><description>使用 cobra 管理命令与参数 tag: https://github.com/tangx/k8sailor/tree/feat/01-cobra-command
为了更加方便的管理配置文件的来源， 这里使用 cobra 进行命令行构建
效果如下
cd cmd/k8sailor &amp;amp;&amp;amp; go run . k8s 管理平台 Usage: k8sailor [flags] Flags: --config string k8s 配置授权文件 (default &amp;#34;./k8sconfig/config.yml&amp;#34;) -h, --help help for k8sailor 编码 变量管理 在 cmd/k8sailor/global 目录中管理 全局 变量。
其中，定义一个 CmdFlag 结构体管理所有 cobra flags。
type CmdFlags struct { Config string `flag:&amp;#34;config&amp;#34; usage:&amp;#34;k8s 配置授权文件&amp;#34; persistent:&amp;#34;true&amp;#34;` } var Flags = &amp;amp;CmdFlags{ Config: &amp;#34;.</description></item><item><title/><link>https://books.tangx.in/k8sailor/chapter01/03-connect-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/k8sailor/chapter01/03-connect-cluster/</guid><description>连接 k3s 集群 tag: https://github.com/tangx/k8sailor/tree/feat/02-connect-cluster
使用 sdk 链接 k3s cluster 并获取 deployment 信息
cd cmd/k8sailor &amp;amp;&amp;amp; go run . * my-nginx-1 (1 replicas) * my-nginx-2 (2 replicas) 下载 client-go sdk 之前在安装 k3s 集群的时候，版本是 v0.21.4。 因此。 这里选择 client-go sdk 的版本也是 v0.21.4
如果还有其他环境， 可以使用 go mod edit 命令锁定 client-go 的版本
go get k8s.io/client-go@v0.21.4 go mod edit -replace=k8s.io/client-go=k8s.io/client-go@v0.21.4 连接集群并获取 deployment https://github.</description></item><item><title/><link>https://books.tangx.in/k8sailor/chapter01/04-init-httpserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/k8sailor/chapter01/04-init-httpserver/</guid><description>使用 gin 初始化一个 API Server tag: https://github.com/tangx/k8sailor/tree/feat/04-httpserver-initial
cd cmd/k8sailor &amp;amp;&amp;amp; go run . httpserver 启动 web 服务器 Usage: k8sailor httpserver [flags] Flags: -h, --help help for httpserver Global Flags: --config string k8s 配置授权文件 (default &amp;#34;./k8sconfig/config.yml&amp;#34;) 2021/09/24 07:56:51 open config/local.yml: no such file or directory [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in &amp;#34;debug&amp;#34; mode. Switch to &amp;#34;release&amp;#34; mode in production.</description></item><item><title/><link>https://books.tangx.in/k8sailor/chapter01/05-design-restful-api-and-response-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/k8sailor/chapter01/05-design-restful-api-and-response-data/</guid><description>RESTful-API 与 http-response-data tag: https://github.com/tangx/k8sailor/tree/feat/05-design-restful-api-and-response-data
强烈建议使用 RESTful 风格来设计 API 文档。
RESTful api # kubectl create deployment nginx-tools --image nginx:alpine --output=yaml --dry-run=clientapiVersion:apps/v1kind:Deploymentmetadata:creationTimestamp:nulllabels:app:nginx-toolsname:nginx-tools# ... 省略# kubectl create namespace hello --dry-run=client -o yamlapiVersion:v1kind:Namespacemetadata:creationTimestamp:nullname:hello# ... 省略可以看到， k8s api 中都有一个对应的 kind 描述资源类型， 这个正好符合 RESTful 中资源定位的需求。
大概就是这样。
# 所有资源操作 GET /appname/v0/:resources ## 特定志愿操作 GET /appname/v0/:resources/:name?params POST /appname/v0/:resources/:name?params DELETE /appname/v0/:resources/:name # 获取所有 deployemnt 信息, 默认会设计一些限定条件， 比如说 namespace=default GET /k8sailor/v0/deployments # 针对特定名称资源的 deployment 操作 GET /k8sailor/v0/deployments/my-nginx-01?</description></item></channel></rss>