<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter03 on 从零开始写一个 kubebuilder</title><link>https://tangx.in/books/kubebuilder-zero-to-one/chapter03/</link><description>Recent content in Chapter03 on 从零开始写一个 kubebuilder</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://tangx.in/books/kubebuilder-zero-to-one/chapter03/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://tangx.in/books/kubebuilder-zero-to-one/chapter03/12-add-event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kubebuilder-zero-to-one/chapter03/12-add-event/</guid><description>增加 event 事件支持 k8s 官方 controller 都实现了 Events 消息信息， 如下
kubectl describe deployment k8s-operator-demo-controller-manager Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal ScalingReplicaSet 15m deployment-controller Scaled up replica set k8s-operator-demo-controller-manager-75cc59d8ff to 1 Normal ScalingReplicaSet 14m deployment-controller Scaled down replica set k8s-operator-demo-controller-manager-b9d9f7886 to 0 我们自定义的 Operator 同样可以实现。
operator 支持 event 在 /controllers/redis_controller.go 中定义 RedisReconcile 的时候， 添加 EventRecord 字段。 // RedisReconciler reconciles a Redis object type RedisReconciler struct { client.</description></item><item><title/><link>https://tangx.in/books/kubebuilder-zero-to-one/chapter03/13-add-status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kubebuilder-zero-to-one/chapter03/13-add-status/</guid><description>添加 Status 状态字段 添加 kd 状态字段 在 /api/v1/redis_types.go 的 RedisStatus 中添加需要展示的字段。
这里添加一个副本数量。
type RedisStatus struct { // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster // Important: Run &amp;#34;make&amp;#34; to regenerate code after modifying this file Replicas int `json:&amp;#34;replicas&amp;#34;` } 偷懒， 没有在创建或删除 pod 时进行精细控制。 而是使用 defer 在 Reconcile 退出的时候进行一次最终的赋值管理。
func (r *RedisReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) { fmt.</description></item><item><title/><link>https://tangx.in/books/kubebuilder-zero-to-one/chapter03/14-kubectl-scale-autoscale-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kubebuilder-zero-to-one/chapter03/14-kubectl-scale-autoscale-support/</guid><description>支持 kubectl scale 和 kubectl autoscale 命令 在 k8s 自定义资源中有关于 scale 和 hpa 的 subresources 字段， 只有这些字段被定义的时候才能支持 scale 和 autoscale 命令
官方定义如下
https://kubernetes.io/zh/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#scale-subresource
在 kubebuilde 中， 使用 //+kubebuilder:subresource:scale 增加注解， 生成对应的配置。
注意， 未知需要在 //+kubebuilder:subresource:status 下方
//+kubebuilder:object:root=true //+kubebuilder:subresource:status //+kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas,selectorpath=.status.selector 三个关键字段:
specpath: specReplicasPath 指定定制资源内与 scale.spec.replicas 对应的 JSON 路径。
此字段为 必需值 。 只可以使用 .spec 下的 JSON 路径，只可使用带句点的路径。 如果定制资源的 specReplicasPath 下没有取值，则针对 /scale 子资源执行 GET 操作时会返回错误。 statuspath: statusReplicasPath 指定定制资源内与 scale.</description></item></channel></rss>