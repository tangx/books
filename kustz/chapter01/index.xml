<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter01 on kustz 写你自己的工具</title><link>https://tangx.in/books/kustz/chapter01/</link><description>Recent content in Chapter01 on kustz 写你自己的工具</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://tangx.in/books/kustz/chapter01/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://tangx.in/books/kustz/chapter01/01-introduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter01/01-introduce/</guid><description>介绍 如果要在 Kubernets 发布一个应用， 并对外提供服务， 需要配置诸如 Dep, Ing, Svc 等 Config API。 他们之间又是通过 Label 组合选择而实现的 松耦合。
如果想要这些 Config API 之间的关系更加紧密， 我们可以自己再向上抽象， 通过自己的配置将他们整合在一起。 更重要的是， 我们可以通过这层抽象， 屏蔽不同版本 API 之间差异。 实现同一个 kustz.yml 配置兼容多版本集群， 实现部署或迁移的丝滑。 Kustomize kustomize: https://kubectl.docs.kubernetes.io/guides/introduction/kustomize/
现在这个官网的引导页面看起来已经有点乱了。
简单的说， 以下是一个最基本的 kustomization.yaml 文件。
apiVersion:kustomize.config.k8s.io/v1beta1kind:Kustomizationnamespace:demo-demoresources:- deployment.yml- service.yml- ingress.yml ApiVersion 和 Kind : 对文件的作用定义 Namespace : 服务部署的运行环境。 Resources : 从外部引入的资源， 最终由 kustomize 统一渲染管理。 比如 patch 操作等。 Deployment, Pod 和 Container 先来说说 Deployment， 这个应该是最常见的 工作负载 workload， 定义 Pod 状态 。</description></item></channel></rss>