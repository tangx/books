<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter02 on kustz 写你自己的工具</title><link>https://tangx.in/books/kustz/chapter02/</link><description>Recent content in Chapter02 on kustz 写你自己的工具</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://tangx.in/books/kustz/chapter02/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://tangx.in/books/kustz/chapter02/01-sample-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter02/01-sample-deployment/</guid><description>2.1. 模仿 kubectl create 创建 Deployment 样例 为了简单， 我们假定所管理的 Deployment 都是 单容器 的。
首先参考 kubectl create 命令
$ kubectl create deployment my-dep --image=busybox --replicas 1 --dry-run=client -o yaml 安装 client-go API 访问 client-go https://github.com/kubernetes/client-go
$ go get k8s.io/client-go@v0.25.4 这里直接选用最新版本 v0.25.4。 对于其他版本的兼容， 留在以后再做。
定义 Kustz Config 参考 kubectl create 命令， 创建配置文件 kustz.yml 结构如下
# kustz.ymlnamespace:demo-demoname:srv-webapp-demoservice:name:nginximage:docker.io/library/nginx:alpinereplicas:2在 service 中添加了 name 字段， 这是在 kubectl create 命令中没有的。 后者直接使用了镜像名称作为 name 的值。</description></item><item><title/><link>https://tangx.in/books/kustz/chapter02/02-define-strings-to-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter02/02-define-strings-to-service/</guid><description>2.2. 定义字符串创建 Service 大家好， 我是老麦， 一个小运维。 今天我们为 kustz 增加 service 解析功能。
通过 kubectl create service 命令可以看到， service 的模式还是挺多的。
$ kubectl create service -h Create a service using a specified subcommand. Aliases: service, svc Available Commands: clusterip Create a ClusterIP service externalname Create an ExternalName service loadbalancer Create a LoadBalancer service nodeport Create a NodePort service 除了以上列出来的四种之外， 还用一种 Headless Service(https://kubernetes.io/docs/concepts/services-networking/service/#headless-services)。
Headless Service 是当 类型 为 ClusterIP，且 IP 值为 None。 所以是 Cluster IP 的一种特殊情况。</description></item><item><title/><link>https://tangx.in/books/kustz/chapter02/03-parse-url-to-ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter02/03-parse-url-to-ingress/</guid><description>2.3. 解析 URL 为 Ingress 大家好， 我是老麦， 一个运维小学生。 今天我们处理 Ingress， 对外提供服务。
之前已经提到过， 在 kustz.yml 中的字段值， 要尽量做到 见名知义。
对于 Ingress 而言， 在发布之后， 我们访问的就是 URL 地址。
http://api.example.com/v1 因此我们可以考虑 从结果推导解析渲染 Ingress 。
Kubernetes Ingress 老规矩， 我们还是通过命令看看创建一个 ingress 需要提供哪些参数。
$ kubectl create ingress simple --rule=&amp;#34;foo.com/bar=svc1:8080,tls=my-cert&amp;#34; -o yaml --dry-run=client 在 rule 中， 提供了两组 k-v。 其中， foo.com/bar 就是一个不带协议的 URL。
再来看看输出结果。
apiVersion:networking.k8s.io/v1kind:Ingressmetadata:creationTimestamp:nullname:simplespec:rules:- host:foo.com # 多 hosthttp:paths:- backend:# 一个 host 多个后端服务service:name:svc1port:number:8080path:/barpathType:Exacttls:- hosts:# 多个证书- foo.</description></item><item><title/><link>https://tangx.in/books/kustz/chapter02/04-kustomize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter02/04-kustomize/</guid><description>2.4. kustomize 流水线 大家好， 我是老麦， 一个运维小学生。
前面已经简单的封装了 Deployment, Service, Ingress， 完成了零部件的创建。
今天就通过 Kustomization 进行组装， 实现流水线。
Kustomize 开始之前， 先来安装 kustomize 库。
$ go get sigs.k8s.io/kustomize/v3 这里补充一下， 访问 Github https://github.com/kubernetes-sigs/kustomize/。
kustomize () 首页 README.md 并没有提到 go get 的包名。 通常 k8s 的代码在 github 上都是镜像。 这时候只需要进到 go.mod ， 包名就一目了然。
// go.mod module sigs.k8s.io/kustomize/v3 go 1.12 编码 先来看看 kustomization.yml 的定义， 非常的简单。</description></item><item><title/><link>https://tangx.in/books/kustz/chapter02/05-kustz-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter02/05-kustz-cli/</guid><description>2.5. 使用 cobra 实现 kustz 命令 大家好， 我是老麦。 一个运维小学生。
有了前面几章的努力， 我们的命令行工具 kustz 终于要问世了。
kustz 命令 当前命令功能就很简单。
default: 输出 kustz 默认配置。 render: 读取 kustz 配置并生成 kustomize 配置四件套。 $ kustz -h Available Commands: default 在屏幕上打印 kustz 默认配置 render 读取 kustz 配置， 生成 kustomize 所需文件 编码 本章的代码都很简单， 就是设计的文件比较多。
使用 cobra 创建命令 cobra 真的是一个非常好用的命令行工具。</description></item></channel></rss>