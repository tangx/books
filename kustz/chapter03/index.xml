<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter03 on kustz 写你自己的工具</title><link>https://tangx.in/books/kustz/chapter03/</link><description>Recent content in Chapter03 on kustz 写你自己的工具</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://tangx.in/books/kustz/chapter03/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://tangx.in/books/kustz/chapter03/01-container-env-var/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter03/01-container-env-var/</guid><description>3.1. 为 Container 添加环境变量 大家好， 我是老麦。 一个运维小学生。 今天为容器添加环境变量。
再前面一章中， 我们已经完成了 Deployment, Service, Ingress 和 Kustomization API 的封装。 并通过 cobra 库创建了属于我们自己的 kustz 命令。
然而 kustz 的功能还简陋。 今天我们就先来为容器添加环境变量。
为容器设置环境变量 在官方文档中， 提高了两种为容器设置环境变量的方法
https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env: 提供 k-v 模式 键值对。 值可以直接 value 提供。 也可以通过 valueFrom 从 secret 或 configmap 引用。 envFrom: 从 secret 或 configmap 中读取键值对， 注入到容器中。。 https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/ kubez.</description></item><item><title/><link>https://tangx.in/books/kustz/chapter03/02-configmap-secret-generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter03/02-configmap-secret-generator/</guid><description>3.2. [kustz] ConfigMap 和 Secret 的生成器 大家好， 我是老麦， 一个运维小学生。 今天我们通过 kustomize 管理 ConfigMap 和 Secret。
上一节我们通过 k-v 和 YAML文件 为容器添加环境变量。 同时也提到了可以通过 envFrom 这个关键字， 直接读取 ConfigMap 或 Secret 中的 k-v 作为容器的环境变量。
除了环境变量之外， ConfigMap 和 Secret 还能管理的东西还很多。 所以我个人觉得单应用管理部署的话， 对于配置的管理，还是比较重要的。
Kustomize 中的 ConfigMap Env File 在 kustzomize 中， ConfigMap 和 Secret 都是通过 生成器 Generator 管理的， 有很多配置。
https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/generatoroptions/
先切到 ConfigMapGenerator， 可以看到有三种模式提供数据, files , literals, envs。</description></item><item><title/><link>https://tangx.in/books/kustz/chapter03/03-container-env-from/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter03/03-container-env-from/</guid><description>3.3. [kustz] 注入 ConfigMap 和 Secrets 到容器环境变量 大家好， 我是老麦。 一个运维小学生。
有了前面两张的铺垫， 今天这个很简单。 我们说说另外一种为容器注入环境变量的方式。
容器变量注入 EnvFrom 前面我们提到过， Container 有两种方式定义环境变量， 其中一种就是 envFrom， 从 ConfigMap 或 Secret 中读取所有键值对作为容器的变量。
ConfigMap 和 Secret 看起来是这样的。 数据都在 data 字段。
apiVersion:v1data:APP_NAME:gin-demoLOG_LEVEL:debugkind:ConfigMapmetadata:name:config-demo在定义引用的时候， 使用 envFrom 关键字， 参考官网案例 https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/
apiVersion:v1kind:Podmetadata:name:dapi-test-podspec:containers:- name:test-containerimage:registry.k8s.io/busyboxcommand:[&amp;#34;/bin/sh&amp;#34;,&amp;#34;-c&amp;#34;,&amp;#34;env&amp;#34;]envFrom:- configMapRef:name:special-config# optional: falserestartPolicy:Never官网的 demo 中并没有提及 optional 这个字段， 但是在后面 限制条件 的时候做了详细解释。
限制
在 Pod 规约中引用某个 ConfigMap 之前，必须先创建这个对象， 或者在 Pod 规约中将 ConfigMap 标记为 optional（请参阅可选的 ConfigMaps）。 如果所引用的 ConfigMap 不存在，并且没有将应用标记为 optional 则 Pod 将无法启动。 同样，引用 ConfigMap 中不存在的主键也会令 Pod 无法启动，除非你将 Configmap 标记为 optional。 如果你使用 envFrom 来基于 ConfigMap 定义环境变量，那么无效的键将被忽略。 Pod 可以被启动，但无效名称将被记录在事件日志中（InvalidVariableNames）。 日志消息列出了每个被跳过的键。例如: 可选的 ConfigMap 你可以在 Pod 规约中将对 ConfigMap 的引用标记为 可选（optional）。 如果 ConfigMap 不存在，那么它在 Pod 中为其提供数据的配置（例如环境变量、挂载的卷）将为空。 如果 ConfigMap 存在，但引用的键不存在，那么数据也是空的。</description></item><item><title/><link>https://tangx.in/books/kustz/chapter03/04-container-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter03/04-container-resources/</guid><description>3.4. 用字符串定义容器申请资源上下限 大家好， 我是老麦， 一个运维小学生。 今天我们来给 kustz 添加资源申请字段。
Pod 的资源申请， 在调度策略中， 是一个重要的参数数据。 因此其重要性自然不必多说
容器资源申请 在官网中， 对于资源的申请和管理有详细的描述。 https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/
和 服务质量 QoS 息息相关， https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/quality-service-pod/
这里简单的归类， 可以速记， 按照服务质量高到低
Guaranteed: request = limit Burstable: request &amp;lt; limit BestEffort: 没有 request 和 limit kustz.yml 配置 还是先来看看 kustz.yml 配置中， 资源的抽象 name: request/limit。
# kustz.ymlservice:resources:cpu:10m/20mmemory:10Mi/20Mi# nvidia.com/gpu: 1/1对应的， 在 /pkg/kustz/kustz.go 中， 增加字段， 如下。</description></item><item><title/><link>https://tangx.in/books/kustz/chapter03/05-container-probe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter03/05-container-probe/</guid><description>3.5. 为 Container 添加健康检查方法 大家好， 我是老麦。 kustz 终于到了准生产的地步了。 今天的健康检查接口， 就为我们解决这个问题。
我们要知道， 确定一个应用能不能对外提供服务之前， 需要进行一个 可用性 检测。 而这个检测通常被我们称为 健康检查。
Kubernetes 的健康检查 在 Kubernetes 中， 为我们提供了 主要 的 3类状态 的健康检查。
startup: 等待探针。 如果执行成功， 则再执行 liveness, readienss。 如果执行失败， 则遵循 restartPolicy 规则。 liveness: 存活探针， 如果失败， 服务将被重新发布(redeploy)。 readiness: 就绪探针， 如果失败， 服务不会加入到 service backend endpoints 中对外提供服务。 https://kubebyexample.com/learning-paths/application-development-kubernetes/lesson-4-customize-deployments-application-2
此外， Kubernetes 支持 4种类型 的检查方式
httpGet: 检查 GET 接口返回值。 tcp: tcp 端口是否打开。 exec: 命令执行是否成功。 grpc: grpc 端口是否打开。 kustz.</description></item><item><title/><link>https://tangx.in/books/kustz/chapter03/06-image-pull-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tangx.in/books/kustz/chapter03/06-image-pull-policy/</guid><description>3.6. 镜像拉取鉴权和策略 大家好， 我是老麦。 今天我们解决镜像拉取鉴权和策略
镜像拉取鉴权 拉取私有镜像或私有仓库镜像的时候， 需要提供鉴权信息。
在 Kubernets 中， 通过 Secret 管理账号这些账号信息。 Secret 类型分为两种，
kubernetes.io/dockerconfigjson: 如果有linux安装了 docker， 就是 ~/.docker/config.json 这个文件。
kubernetes.io/dockercfg: 不太熟。
在 /pkg/tokube/pod.go 中， 可以看到 ImagePullSecrets 的处理方法。 就是将字符串转为 kubernetes 的引用对象， 其它没什么好说的。
func ImagePullSecrets(secrets []string) []corev1.LocalObjectReference { if len(secrets) == 0 { return nil } objs := []corev1.LocalObjectReference{} for _, s := range secrets { objs = append(objs, corev1.</description></item></channel></rss>