<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter04 on kustz 写你自己的工具</title><link>https://books.tangx.in/kustz/chapter04/</link><description>Recent content in Chapter04 on kustz 写你自己的工具</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://books.tangx.in/kustz/chapter04/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://books.tangx.in/kustz/chapter04/01-kustz-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/chapter04/01-kustz-flags/</guid><description>4.1. 使用 cobrautils 为命令添加更实用的命令参数 大家好， 我是老麦。
之前的章节， 我们陆陆续续给 kustz 库添加了很多丰富服务的配置
但 kustz 命令， 还是处于一个很原始的命令状态。 接下来我们给 kustz 添加一些更丰富的参数 ， 使 kustz 用起来更顺手。
在 CICD 的中， 一般情况下 变量，健康检查， 镜像策略 等很难发生变动。 而镜像名称 经常性 的在每次打包后发生变化。
每次CI触发都去修改 kustz.yml 配置显然是不可能的。 因此， 我们需要绑定更丰富的参数来支持我们 CI 的运行。
cobra flag 之前在 /cmd/kustz/cmd/render.go 中， 我们为命令添加了一个指定配置文件的参数。
func init() { cmdRender.Flags().StringVarP(&amp;amp;config, &amp;#34;config&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;kustz.yml&amp;#34;, &amp;#34;kustz config&amp;#34;) } var config string 这种方法是 cobra 官方提供的基本模式。 在绑定的时候， 需要一行写一个， 并且不支持 指针参数 。</description></item></channel></rss>