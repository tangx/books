<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kuberbuilder 从零开始</title><link>https://books.tangx.in/kustz/</link><description>Recent content on kuberbuilder 从零开始</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://books.tangx.in/kustz/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://books.tangx.in/kustz/01-introduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/01-introduce/</guid><description>介绍 # 如果要在 Kubernets 发布一个应用， 并对外提供服务， 需要配置诸如 Dep, Ing, Svc 等 Config API。 他们之间又是通过 Label 组合选择而实现的 松耦合。
如果想要这些 Config API 之间的关系更加紧密， 我们可以自己再向上抽象， 通过自己的配置将他们整合在一起。 更重要的是， 我们可以通过这层抽象， 屏蔽不同版本 API 之间差异。 实现同一个 kustz.yml 配置兼容多版本集群， 实现部署或迁移的丝滑。 Kustomize # kustomize: https://kubectl.docs.kubernetes.io/guides/introduction/kustomize/
现在这个官网的引导页面看起来已经有点乱了。
简单的说， 以下是一个最基本的 kustomization.yaml 文件。
apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization namespace: demo-demo resources: - deployment.yml - service.yml - ingress.yml ApiVersion 和 Kind : 对文件的作用定义 Namespace : 服务部署的运行环境。 Resources : 从外部引入的资源， 最终由 kustomize 统一渲染管理。 比如 patch 操作等。 Deployment, Pod 和 Container # 先来说说 Deployment， 这个应该是最常见的 工作负载 workload， 定义 Pod 状态 。</description></item><item><title/><link>https://books.tangx.in/kustz/02-1-sample-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/02-1-sample-deployment/</guid><description>2.1. 模仿 kubectl create 创建 Deployment 样例 # 为了简单， 我们假定所管理的 Deployment 都是 单容器 的。
首先参考 kubectl create 命令
$ kubectl create deployment my-dep --image=busybox --replicas 1 --dry-run=client -o yaml 安装 client-go API # 访问 client-go https://github.com/kubernetes/client-go
$ go get k8s.io/client-go@v0.25.4 这里直接选用最新版本 v0.25.4。 对于其他版本的兼容， 留在以后再做。
定义 Kustz Config # 参考 kubectl create 命令， 创建配置文件 kustz.yml 结构如下
# kustz.yml namespace: demo-demo name: srv-webapp-demo service: name: nginx image: docker.io/library/nginx:alpine replicas: 2 在 service 中添加了 name 字段， 这是在 kubectl create 命令中没有的。 后者直接使用了镜像名称作为 name 的值。</description></item><item><title/><link>https://books.tangx.in/kustz/02-2-define-strings-to-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/02-2-define-strings-to-service/</guid><description>2.2. 定义字符串创建 Service # 大家好， 我是老麦， 一个小运维。 今天我们为 kustz 增加 service 解析功能。
通过 kubectl create service 命令可以看到， service 的模式还是挺多的。
$ kubectl create service -h Create a service using a specified subcommand. Aliases: service, svc Available Commands: clusterip Create a ClusterIP service externalname Create an ExternalName service loadbalancer Create a LoadBalancer service nodeport Create a NodePort service 除了以上列出来的四种之外， 还用一种 Headless Service(https://kubernetes.io/docs/concepts/services-networking/service/#headless-services)。
Headless Service 是当 类型 为 ClusterIP，且 IP 值为 None。 所以是 Cluster IP 的一种特殊情况。</description></item><item><title/><link>https://books.tangx.in/kustz/02-3-parse-url-to-ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/02-3-parse-url-to-ingress/</guid><description>2.3. 解析 URL 为 Ingress # 大家好， 我是老麦， 一个运维小学生。 今天我们处理 Ingress， 对外提供服务。
之前已经提到过， 在 kustz.yml 中的字段值， 要尽量做到 见名知义。
对于 Ingress 而言， 在发布之后， 我们访问的就是 URL 地址。
http://api.example.com/v1 因此我们可以考虑 从结果推导解析渲染 Ingress 。
Kubernetes Ingress # 老规矩， 我们还是通过命令看看创建一个 ingress 需要提供哪些参数。
$ kubectl create ingress simple --rule=&amp;#34;foo.com/bar=svc1:8080,tls=my-cert&amp;#34; -o yaml --dry-run=client 在 rule 中， 提供了两组 k-v。 其中， foo.com/bar 就是一个不带协议的 URL。
再来看看输出结果。
apiVersion: networking.k8s.io/v1 kind: Ingress metadata: creationTimestamp: null name: simple spec: rules: - host: foo.</description></item><item><title/><link>https://books.tangx.in/kustz/02-4-kustomize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/02-4-kustomize/</guid><description>2.4. kustomize 流水线 # 大家好， 我是老麦， 一个运维小学生。
前面已经简单的封装了 Deployment, Service, Ingress， 完成了零部件的创建。
今天就通过 Kustomization 进行组装， 实现流水线。
Kustomize # 开始之前， 先来安装 kustomize 库。
$ go get sigs.k8s.io/kustomize/v3 这里补充一下， 访问 Github https://github.com/kubernetes-sigs/kustomize/。
kustomize () 首页 README.md 并没有提到 go get 的包名。 通常 k8s 的代码在 github 上都是镜像。 这时候只需要进到 go.mod ， 包名就一目了然。
// go.mod module sigs.k8s.io/kustomize/v3 go 1.12 编码 # 先来看看 kustomization.yml 的定义， 非常的简单。
apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization namespace: demo-demo resources: - deployment.</description></item><item><title/><link>https://books.tangx.in/kustz/02-5-kustz-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/02-5-kustz-cli/</guid><description>2.5. 使用 cobra 实现 kustz 命令 # 大家好， 我是老麦。 一个运维小学生。
有了前面几章的努力， 我们的命令行工具 kustz 终于要问世了。
kustz 命令 # 当前命令功能就很简单。
default: 输出 kustz 默认配置。 render: 读取 kustz 配置并生成 kustomize 配置四件套。 $ kustz -h Available Commands: default 在屏幕上打印 kustz 默认配置 render 读取 kustz 配置， 生成 kustomize 所需文件 编码 # 本章的代码都很简单， 就是设计的文件比较多。
使用 cobra 创建命令 # cobra 真的是一个非常好用的命令行工具。
go get -u github.com/spf13/cobra 在 /cmd/kustz/cmd/root.go 中创建 根命令 rootCmd。 并定义 执行函数 Execute。</description></item><item><title/><link>https://books.tangx.in/kustz/03-1-container-env-var/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/03-1-container-env-var/</guid><description>3.1. 为 Container 添加环境变量 # 大家好， 我是老麦。 一个运维小学生。 今天为容器添加环境变量。
再前面一章中， 我们已经完成了 Deployment, Service, Ingress 和 Kustomization API 的封装。 并通过 cobra 库创建了属于我们自己的 kustz 命令。
然而 kustz 的功能还简陋。 今天我们就先来为容器添加环境变量。
为容器设置环境变量 # 在官方文档中， 提高了两种为容器设置环境变量的方法
https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env: 提供 k-v 模式 键值对。 值可以直接 value 提供。 也可以通过 valueFrom 从 secret 或 configmap 引用。 envFrom: 从 secret 或 configmap 中读取键值对， 注入到容器中。。 https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/ kubez.</description></item><item><title/><link>https://books.tangx.in/kustz/03-2-configmap-secret-generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/03-2-configmap-secret-generator/</guid><description>3.2. [kustz] ConfigMap 和 Secret 的生成器 # 大家好， 我是老麦， 一个运维小学生。 今天我们通过 kustomize 管理 ConfigMap 和 Secret。
上一节我们通过 k-v 和 YAML文件 为容器添加环境变量。 同时也提到了可以通过 envFrom 这个关键字， 直接读取 ConfigMap 或 Secret 中的 k-v 作为容器的环境变量。
除了环境变量之外， ConfigMap 和 Secret 还能管理的东西还很多。 所以我个人觉得单应用管理部署的话， 对于配置的管理，还是比较重要的。
Kustomize 中的 ConfigMap Env File # 在 kustzomize 中， ConfigMap 和 Secret 都是通过 生成器 Generator 管理的， 有很多配置。
https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/generatoroptions/
先切到 ConfigMapGenerator， 可以看到有三种模式提供数据, files , literals, envs。</description></item><item><title/><link>https://books.tangx.in/kustz/03-3-container-env-from/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/03-3-container-env-from/</guid><description>3.3. [kustz] 注入 ConfigMap 和 Secrets 到容器环境变量 # 大家好， 我是老麦。 一个运维小学生。
有了前面两张的铺垫， 今天这个很简单。 我们说说另外一种为容器注入环境变量的方式。
容器变量注入 EnvFrom # 前面我们提到过， Container 有两种方式定义环境变量， 其中一种就是 envFrom， 从 ConfigMap 或 Secret 中读取所有键值对作为容器的变量。
ConfigMap 和 Secret 看起来是这样的。 数据都在 data 字段。
apiVersion: v1 data: APP_NAME: gin-demo LOG_LEVEL: debug kind: ConfigMap metadata: name: config-demo 在定义引用的时候， 使用 envFrom 关键字， 参考官网案例 https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/
apiVersion: v1 kind: Pod metadata: name: dapi-test-pod spec: containers: - name: test-container image: registry.</description></item><item><title/><link>https://books.tangx.in/kustz/03-4-container-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/03-4-container-resources/</guid><description>3.4. 用字符串定义容器申请资源上下限 # 大家好， 我是老麦， 一个运维小学生。 今天我们来给 kustz 添加资源申请字段。
Pod 的资源申请， 在调度策略中， 是一个重要的参数数据。 因此其重要性自然不必多说
容器资源申请 # 在官网中， 对于资源的申请和管理有详细的描述。 https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/
和 服务质量 QoS 息息相关， https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/quality-service-pod/
这里简单的归类， 可以速记， 按照服务质量高到低
Guaranteed: request = limit Burstable: request &amp;lt; limit BestEffort: 没有 request 和 limit kustz.yml 配置 # 还是先来看看 kustz.yml 配置中， 资源的抽象 name: request/limit。
# kustz.yml service: resources: cpu: 10m/20m memory: 10Mi/20Mi # nvidia.com/gpu: 1/1 对应的， 在 /pkg/kustz/kustz.</description></item><item><title/><link>https://books.tangx.in/kustz/03-5-container-probe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/03-5-container-probe/</guid><description>3.5. 为 Container 添加健康检查方法 # 大家好， 我是老麦。 kustz 终于到了准生产的地步了。 今天的健康检查接口， 就为我们解决这个问题。
我们要知道， 确定一个应用能不能对外提供服务之前， 需要进行一个 可用性 检测。 而这个检测通常被我们称为 健康检查。
Kubernetes 的健康检查 # 在 Kubernetes 中， 为我们提供了 主要 的 3类状态 的健康检查。
startup: 等待探针。 如果执行成功， 则再执行 liveness, readienss。 如果执行失败， 则遵循 restartPolicy 规则。 liveness: 存活探针， 如果失败， 服务将被重新发布(redeploy)。 readiness: 就绪探针， 如果失败， 服务不会加入到 service backend endpoints 中对外提供服务。 https://kubebyexample.com/learning-paths/application-development-kubernetes/lesson-4-customize-deployments-application-2
此外， Kubernetes 支持 4种类型 的检查方式
httpGet: 检查 GET 接口返回值。 tcp: tcp 端口是否打开。 exec: 命令执行是否成功。 grpc: grpc 端口是否打开。 kustz.</description></item><item><title/><link>https://books.tangx.in/kustz/03-6-image-pull-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/03-6-image-pull-policy/</guid><description>3.6. 镜像拉取鉴权和策略 # 大家好， 我是老麦。 今天我们解决镜像拉取鉴权和策略
镜像拉取鉴权 # 拉取私有镜像或私有仓库镜像的时候， 需要提供鉴权信息。
在 Kubernets 中， 通过 Secret 管理账号这些账号信息。 Secret 类型分为两种，
kubernetes.io/dockerconfigjson: 如果有linux安装了 docker， 就是 ~/.docker/config.json 这个文件。
kubernetes.io/dockercfg: 不太熟。
在 /pkg/tokube/pod.go 中， 可以看到 ImagePullSecrets 的处理方法。 就是将字符串转为 kubernetes 的引用对象， 其它没什么好说的。
func ImagePullSecrets(secrets []string) []corev1.LocalObjectReference { if len(secrets) == 0 { return nil } objs := []corev1.LocalObjectReference{} for _, s := range secrets { objs = append(objs, corev1.</description></item><item><title/><link>https://books.tangx.in/kustz/04-1-kustz-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/04-1-kustz-flags/</guid><description>4.1. 使用 cobrautils 为命令添加更实用的命令参数 # 大家好， 我是老麦。
之前的章节， 我们陆陆续续给 kustz 库添加了很多丰富服务的配置
但 kustz 命令， 还是处于一个很原始的命令状态。 接下来我们给 kustz 添加一些更丰富的参数 ， 使 kustz 用起来更顺手。
在 CICD 的中， 一般情况下 变量，健康检查， 镜像策略 等很难发生变动。 而镜像名称 经常性 的在每次打包后发生变化。
每次CI触发都去修改 kustz.yml 配置显然是不可能的。 因此， 我们需要绑定更丰富的参数来支持我们 CI 的运行。
cobra flag # 之前在 /cmd/kustz/cmd/render.go 中， 我们为命令添加了一个指定配置文件的参数。
func init() { cmdRender.Flags().StringVarP(&amp;amp;config, &amp;#34;config&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;kustz.yml&amp;#34;, &amp;#34;kustz config&amp;#34;) } var config string 这种方法是 cobra 官方提供的基本模式。 在绑定的时候， 需要一行写一个， 并且不支持 指针参数 。</description></item><item><title/><link>https://books.tangx.in/kustz/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://books.tangx.in/kustz/readme/</guid><description>Kustz # 使用 kustomize 简化 kubernetes 服务部署和配置
目录 # 第一章 简介 # 01. 简介 第二章 基础结构 # 2.1. 模仿 kubectl create 创建 Deployment 样例 2.2. 定义字符串创建 Service 2.3. 解析 URL 为 Ingress 2.4. kustomize 流水线 2.5. 使用 cobra 实现 kustz 命令 第三章 高级扩展 # 3.1. 为 Container 添加环境变量 3.2. ConfigMap 和 Secret 的生成器 3.</description></item></channel></rss>