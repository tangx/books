<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01. Go开发环境配置 on 《Shell 转 Go》</title>
    <link>https://typonotes.com/books/golang/startup/</link>
    <description>Recent content in 01. Go开发环境配置 on 《Shell 转 Go》</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/golang/startup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. 项目简介</title>
      <link>https://typonotes.com/books/golang/startup/introduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/startup/introduce/</guid>
      <description></description>
    </item>
    
    <item>
      <title>02. 下载安装与环境配置</title>
      <link>https://typonotes.com/books/golang/startup/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/startup/install/</guid>
      <description>下载和安装 前往 官网Go下载地址 页面下载与自己操作系统对应二进制文件。
通常我会选择压缩包， 然后解压到所需要安装的目录。
例如， 我是 mac 的 intel 系统， go1.19.6.darwin-amd64.tar.gz
cd /tmp wget -c https://go.dev/dl/go1.19.6.darwin-amd64.tar.gz sudo tar xf go1.19.6.darwin-amd64.tar.gz -C /usr/local 配置环境变量 GOPROXY: Go代理地址， 通常使用 https://goproxy.cn 或 https://goproxy.io GOROOT: Go 二进制的位置, 即我们上面解压目录的 /usr/local/go GOPATH: 这个是我们项目代码的位置， 有了 go mod 之后 不是绝对的了 使用 go install 后， 编译的二进制会默认在 $GOPATH/bin/ 使用 go get 下载的所有库文件在 $GOPATH/pkg/mod/ 中 可以直接 go mod init， 如果项目在 $GOPATH/src/ 中， 会默认以相对目录配置 module 路径。 对于 Mac 和 Linux 系统， 设置环境变量。 配置到 /etc/profile 中。</description>
    </item>
    
    <item>
      <title>03. VSCode配置与插件</title>
      <link>https://typonotes.com/books/golang/startup/vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/startup/vscode/</guid>
      <description>VS Code 我更喜欢 gopls， 所以我没用 goland。
下载 到 微软官方 下载 VS Code: https://code.visualstudio.com/ 。
插件 一个好汉三个帮， 一个篱笆三个桩。
VSCode 本身并不是某个特定语言的 IDE。 但是安装了插件 VSCode 就是鸟枪换炮， 爽得飞起。
Go 相关的 必须安装的 Go 插件 , 现在已经交给 Go Team 维护: 非常有用的 Go template 插件， 可以提供 template 的 高亮 和 格式化。 测试使用的 Go Test Explorer， 前期不写单元测试， 也可以不装。 提供代码片段缩写的 Go Snippet， 有用但不多。 可以将 JSON 文件直接转换成结构体的 Paste JSON as Code 通用的 格式化 JSON 的 Json Tools。 展示更方便。 远程开发必备的 Remote - SSH。 可以直接在目标机器（容器）中开发、调试。 一款网络请求的客户端工具 REST Client , 有他就可以不用 Postman 了。 工具 在安装完 最核心的 Go 插件后， VSCode 就会推荐按安装各种开发工具了。</description>
    </item>
    
    <item>
      <title>04. 项目的目录结构</title>
      <link>https://typonotes.com/books/golang/startup/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/startup/layout/</guid>
      <description>go 官方本身并没有约束 特定 的项目目录结构， 只有两条最终要的规则
main.main() 是入口 import 没有循环。 1. 社区建议 然后社区还是给出了推荐的目录结构，可以参考如下。
https://github.com/golang-standards/project-layout?tab=readme-ov-file
更详细的说明可以参考 《Cobra 实战》的项目目录鹅机构
2. 实际情况 实际情况就很复杂了。 比如线上环境和开发完全的不一致（做过政府项目的都知道）
所以
不同公司都有自己的要求， 跟着要求走就好了。 个人项目， 可以按照社区规范执行。 规范只是一群特定的人的共同约束， 大家认可就行了。 不必吐槽公司不按照社区规范执行。</description>
    </item>
    
  </channel>
</rss>
