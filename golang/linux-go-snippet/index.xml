<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>05. Go 实现: Shell 命令 on 《Shell 转 Go》</title>
    <link>https://typonotes.com/books/golang/linux-go-snippet/</link>
    <description>Recent content in 05. Go 实现: Shell 命令 on 《Shell 转 Go》</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/golang/linux-go-snippet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>03. 文件路径管理</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/filepath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/filepath/</guid>
      <description></description>
    </item>
    
    <item>
      <title>04. 文件名管理</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/filename/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/filename/</guid>
      <description> 1. 文件名 2. 文件后缀 </description>
    </item>
    
    <item>
      <title>cut 切割字符串</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/cut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/cut/</guid>
      <description>cut 有几个参数， 分别提供了不同的用法。
1. -b 获取字符或字符串 $ echo abcdefg |cut -b 1,5 ae $ echo abcdefg |cut -b 1-5 abcde 这种情况， 相当于在 Go 中的切片操作
func CutB() { s := &amp;#34;abcdefg&amp;#34; b1 := s[0] // (1) var b1 byte fmt.Println(string(b1)) // cut -b 1 fmt.Println(s[0:5]) // (2) cut -b 1-5 } 这里需要注意的是
如果对字符串取 1个值， 则取出来的值是 byte 类型。 例如这里的 b1 Go 中的索引是 从 0 开始 计数； 且属于 左闭又开 模式， 即 左包含右不包含。 2. -d 指定分隔符， -f 指定分段位置 在使用 -d 的时候， 可以指定 分割符。</description>
    </item>
    
    <item>
      <title>ls 查看目录内容</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/ls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/ls/</guid>
      <description>在 Linux 中， 使用 ls 命令查看文件夹内容
ls /path/2/folder 在 Go 中， 使用 os.ReadDir 获取文件夹中的内容。
func OsWalk(name string) { entries, err := os.ReadDir(name) if err != nil { panic(err) } for _, entry := range entries { if entry.IsDir() { fmt.Printf(&amp;#34;%s 是文件夹\n&amp;#34;, entry.Name()) } fmt.Printf(&amp;#34;%s 是文件\n&amp;#34;, entry.Name()) } } </description>
    </item>
    
    <item>
      <title>md5sum 计算md5值</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/md5sum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/md5sum/</guid>
      <description>在 Linux 中， 使用 MD5 值作为唯一性校验应该是最基本的了。
# 字符串 echo &amp;#34;abc&amp;#34; | md5sum # 文件 md5sum /path/2/file.txt 计算字符串 md5 计算字符串 md5 值相对简单， 直接使用标准库中的 md5 库就可以了
func MustMd5(s string) string { h := md5.New() _, err := io.WriteString(h, s) if err != nil { panic(err) } return fmt.Sprintf(&amp;#34;%x&amp;#34;, h.Sum(nil)) } 计算文件 md5 计算文件的就稍微多一个步骤， 就是读取文件内容。 读取完了， 直接丢到上一个函数中就可以了。
func MustMd5File(name string) string { data, err := os.ReadFile(name) if err != nil { panic(err) } return MustMd5(string(data)) } </description>
    </item>
    
    <item>
      <title>mkdir 创建目录</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/mkdir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/mkdir/</guid>
      <description>在 Linux 中， 创建目录使用 mkdir， 如果要多级创建使用 mkdir -p
mkdir -p /path mkdir -p /path/to/abc 在 Go 中， 有对应的标准库 os.Mkdir
func Mkdir() { os.Mkdir(&amp;#34;path&amp;#34;, os.ModePerm) // 创建一级目录 os.MkdirAll(&amp;#34;path/to/abc&amp;#34;, os.ModePerm) // 创建多级目录 } 在创建的时候， 需要指定目录权限， 通常使用 os.ModePerm 就可以了。</description>
    </item>
    
    <item>
      <title>random</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/random/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/random/</guid>
      <description></description>
    </item>
    
    <item>
      <title>sleep 时间等待</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/sleep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/sleep/</guid>
      <description>时间等待， 让程序 阻塞 一段时间
在 Shell 中 在 Shell 中使用 sleep n ， n 的默认单位 秒
sleep 2 在 Go 中 在 Go 中， 对应使用 time.Sleep(n) 方法。但是需要注意的是， n 的默认单位是 毫秒。
time.Sleep(200) 如果要实现如果实现 秒 级别等待，
可以将数字扩大 1000 倍， n * 1000 可以使用单位 n * time.Second time.Sleep(2 * 1000) time.Sleep(2 * time.Second) 常见单位 const ( Nanosecond Duration = 1 // 纳秒 Microsecond = 1000 * Nanosecond // 微秒 Millisecond = 1000 * Microsecond // 毫秒 Second = 1000 * Millisecond Minute = 60 * Second Hour = 60 * Minute ) </description>
    </item>
    
    <item>
      <title>tr 大小写转换</title>
      <link>https://typonotes.com/books/golang/linux-go-snippet/tr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/linux-go-snippet/tr/</guid>
      <description>大小写转换 tr 其中一个最常见的， 是 大小写 的转换。
echo &amp;#34;abcDefg&amp;#34; | tr &amp;#39;a-z&amp;#39; &amp;#39;A-Z&amp;#39; 对于这个使用 Go 中对应的标准库 strings
func TrDemo() { s1 := strings.ToLower(&amp;#34;abcDEFg&amp;#34;) // 转小写 s2 := strings.ToUpper(&amp;#34;abcDEFg&amp;#34;) // 转大写 fmt.Println(s1, s2) } 删除字符 使用 tr -d 删除出现的字符
echo &amp;#34;abcabcabc&amp;#34; | tr -d &amp;#34;ac&amp;#34; 这种情况下， 可以使用 strings.NewReplacer 创建自己的过滤器
func TrDeleteDemo(t *testing.T) { delAbc := strings.NewReplacer(&amp;#34;a&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;&amp;#34;) ret := delAbc.Replace(&amp;#34;abcabcabc&amp;#34;) fmt.Println(ret) } 其中, NewReplacer 的参数必须为双数， 两个一组(old -&amp;gt; new)。 例如这里的就是 a -&amp;gt; 空, c -&amp;gt; 空， 也就是删除的意思。</description>
    </item>
    
  </channel>
</rss>
