<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>03. 流程控制 on 《Shell 转 Go》</title>
    <link>https://typonotes.com/books/golang/shell-to-go/process-control/</link>
    <description>Recent content in 03. 流程控制 on 《Shell 转 Go》</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/golang/shell-to-go/process-control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. 条件语句 (if else)</title>
      <link>https://typonotes.com/books/golang/shell-to-go/process-control/if-else/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/shell-to-go/process-control/if-else/</guid>
      <description>Shell function abc() { n=$1 if [ $n -gt 100 ]; then { # 括号可有可无 echo &amp;#34;无效&amp;#34; } elif [ $n -gt 90 ]; then echo &amp;#34;优秀&amp;#34; else { echo &amp;#34;一般&amp;#34; } fi } 在 Shell 中，
if-else-fi 是通过关键字约束 语句块 边界的。 大括号 {} 可有可无， 但是最好还是带上， 增强可读性。 判断条件使用 方括号 [ ] 或 [[ ]] 定义。 Go func if_else(n int) { if n &amp;gt;= 100 || n &amp;lt;= -1 { fmt.Println(&amp;#34;无效&amp;#34;) } else if n &amp;gt; 90 { fmt.</description>
    </item>
    
    <item>
      <title>02. 循环语句 (for)</title>
      <link>https://typonotes.com/books/golang/shell-to-go/process-control/for-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/shell-to-go/process-control/for-loops/</guid>
      <description>Go 循环 在 Go 中， 循环只有一个关键字 for， 通过不同的 格式 实现不同的逻辑
基本格式如下
for 默认值; 条件; 计数器 { fmt.Println(&amp;#34;i=&amp;#34;, i) } 以上的 每一个字段都可以省略 。
计数循环 在 shell 中， 通常使用 seq 实现计数循环
for i in $(seq 1 10); do { echo &amp;#34;i = $i&amp;#34; } done 而在 Go 中，
for i := 0; i &amp;lt; 1; i++ { fmt.Println(&amp;#34;i=&amp;#34;, i) } 遍历循环 for name in zhangsan lisi wangwu zhaoliu; do { echo &amp;#34;name = $name&amp;#34; } done 在 Go 中， 需要将对象放入到 切片 中</description>
    </item>
    
    <item>
      <title>03. 分支语句 (switch)</title>
      <link>https://typonotes.com/books/golang/shell-to-go/process-control/switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/shell-to-go/process-control/switch/</guid>
      <description>在 Shell 中使用 case ... in 做分支语句。
使用 case ... in 作为开始， 使用 esac 作为结尾 使用 xxx ) 格式作为条件分支。 其中 xxx 可以是多个并列条件 使用 ;; 作为语句块结束。 使用 * 作为默认条件语句， 可省略。 case $1 in &amp;#34;n1&amp;#34;) echo &amp;#34;n1&amp;#34; ;; &amp;#34;n2&amp;#34; | &amp;#34;n3&amp;#34;) echo &amp;#34;n2 or n3&amp;#34; ;; *) echo &amp;#34;default&amp;#34; ;; esac 在 Go 中使用 switch 作为分支语句
使用 switch 关键字作为开始 使用 case 关键字作为分支条件。 没有单独的结尾关键字 使用 default 作为 switch n { case 1: fmt.Println(&amp;#34;1&amp;#34;) fallthrough case 2, 3, &amp;#34;a&amp;#34;: fmt.</description>
    </item>
    
    <item>
      <title>04. 跳转语句(label)</title>
      <link>https://typonotes.com/books/golang/shell-to-go/process-control/label/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/shell-to-go/process-control/label/</guid>
      <description>Label 标签在 Shell 中没有。 但在 Go 中却应用广泛。
Label Label 的定义规则为 SomeName: ， 以 : 结尾。
在 Go 使用 Label 必须使用配置关键字 continue, break, goto 的其中一个。
需要注意的是，
continue 和 break 的 Label 可以省略。 continue|break [Label] goto 必须配置 Laebl 使用。 goto Label for/select/switch 和 Label 直接使用 continue/break 的时候， 作用域在 当前代码体 中。 如果配合了 Label 就可以跳出到 当前代码体外。 在配合 for/select/switch 使用时， Label 必须 紧临 他们， 中间不能有任何其他语句。 func continueBreakDemo() { Outer: for m := 1; m &amp;lt; 10; m++ { Inner: for n := 1; n &amp;lt; 10; n++ { fmt.</description>
    </item>
    
    <item>
      <title>05. 并发选择语句(select)</title>
      <link>https://typonotes.com/books/golang/shell-to-go/process-control/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/shell-to-go/process-control/select/</guid>
      <description>select 语句在 Shell 中没有， 但是在 Go 中却是 并发 的根基。
select 在语法上面， 和 switch 相似
使用 case 作为分支入口。 使用 default 作为默认语句。 不同的是，
select 没有条件语句 func selectGrammar(ctx context.Context) { channel := make(chan int, 10) value := 100 select { case &amp;lt;-ctx.Done(): // 执行的代码 case &amp;lt;-time.After(10 * time.Second): // 执行的代码 case val := &amp;lt;-channel: fmt.Println(val) // 执行的代码 case channel &amp;lt;- value: // 执行代码 default: // 所有通道都没有准备好，执行的代码 } } 每个 case 语句都必须是一个通道(channel)。 常见的通道包括以下: ctx.Done。 time.</description>
    </item>
    
  </channel>
</rss>
