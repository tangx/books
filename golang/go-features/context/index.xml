<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>02. 上下文 Context on 《Shell 转 Go》</title>
    <link>https://typonotes.com/books/golang/go-features/context/</link>
    <description>Recent content in 02. 上下文 Context on 《Shell 转 Go》</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/golang/go-features/context/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Context 值传递 - 源码解析(1)</title>
      <link>https://typonotes.com/books/golang/go-features/context/context-value-propagation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/go-features/context/context-value-propagation/</guid>
      <description>Golang 上下文(Context) 源码解析(1): 值传递 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。
状态: 未更新
原文链接: https://typonotes.com/posts/2023/03/01/devopscamp-context-sample/
上下文 Context 应该是 Go语言 中一个极其重要的 基石 概念了。 本文将通过一个案例 着重 说明 值传递 的过程、用法和注意事项。
本文会通过 案例分析， 扩展到 源码讲解、使用方式 等多方面进行 Context 讲解。
阅读完本文后， 你能
掌握标准库中的 Context 是如何实现存取值的。 掌握开源库中， 对于 Context 的封装使用。 扩展阅读 这里有一篇 Go 语言设计与实现 - 上下文 Context ， 是目前我学习的资料中 完成度 和 友善度 都很高的一篇文章。
不管你愿不愿意， 用 Go 都绕不过 Context。不管用不用， 在所有 公共方法或函数 中强迫自己自己使用 context 作为入参。 虽然有点武断，但是&amp;hellip;（我也没有想到好的理由）
从上文中我们可以确认， context 有两个核心作用， 值传递 与 信号传递。</description>
    </item>
    
    <item>
      <title>2. Golang Context 值传递的生产案例(01) - 链路追踪</title>
      <link>https://typonotes.com/books/golang/go-features/context/context-in-action-trace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/go-features/context/context-in-action-trace/</guid>
      <description>Golang Context 值传递的生产案例(01): 链路追踪 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。
状态: 未更新
原文链接: https://typonotes.com/posts/2023/03/15/golang-context-in-action-trace/
看完本文
了解 链路追踪 和 OpenTelemetry 相关知识 了解 Context 值传递是如何在 链路追踪 的发展历程上登台亮相的。 之前在 Golang 上下文 Context 源码解析(1): 值传递 文章中举了一个例子说明讲解 Context 的值传递， 其中说到了 刘备-关羽-张飞 之间使用 Context 传递 曹操军队人数，
有朋友反馈说这个值应该是 业务参数 放在函数中作为 形参 传递， 难以理解为什么会放在 Context 中。
func Guanyu(n int) { // statement } func Zhangfei(n int) { // statement } 因此， 这次我们通过生产实际应用， 来说一下 Context 的值传递。
链路追踪 想必大家也知道， 微服务治理是一个头疼的问题。 由于服务众多且部署分散， 因此通过 调用链路 排查问题就非常重要了。 实现这个的方案就叫 链路追踪 ， 在微服务中非常重要。</description>
    </item>
    
  </channel>
</rss>
