<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cobra-in-action on 《Shell 转 Go》</title>
    <link>https://typonotes.com/books/golang/cobra-in-action/</link>
    <description>Recent content in Cobra-in-action on 《Shell 转 Go》</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/golang/cobra-in-action/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. 参数绑定与交叉编译</title>
      <link>https://typonotes.com/books/golang/cobra-in-action/01-cobra-sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/cobra-in-action/01-cobra-sample/</guid>
      <description>作业要求: 使用 https://github.com/spf13/cobra 实现命令工具 命令具有以下参数 --name 姓名 --age 年龄 如果年龄为空， 默认为 20 岁。 完成交叉编译脚本， 编译其他平台的二进制文件 -rwxr-xr-x 1 devopscamp staff 4220672 Jan 13 15:35 greeting-darwin-amd64 -rwxr-xr-x 1 devopscamp staff 4203442 Jan 13 15:35 greeting-darwin-arm64 -rwxr-xr-x 1 devopscamp staff 4215010 Jan 13 15:35 greeting-linux-amd64 -rwxr-xr-x 1 devopscamp staff 4157892 Jan 13 15:35 greeting-linux-arm64 执行输出效果如下 $ ./out/greeting-darwin-arm64 你好, 今年 20 岁 $ ./out/greeting-darwin-arm64 --age 30 --name zhangsan zhangsan 你好, 今年 30 岁 解题过程 1.</description>
    </item>
    
    <item>
      <title>2. 配置文件读取与写入</title>
      <link>https://typonotes.com/books/golang/cobra-in-action/02-json-yaml-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/cobra-in-action/02-json-yaml-config/</guid>
      <description>作业要求 使用 https://github.com/spf13/cobra 实现命令工具 命令具有以下参数 --config , -c 配置文件 配置文件如下
# config.yml name: zhangsan age: 20 将配置文件保存为 JSON 格式 $ cat config.json 输出结果
{ &amp;#34;name&amp;#34;:&amp;#34;zhangsan&amp;#34;, &amp;#34;age&amp;#34;: 20 } 单个参数绑定的困境 之前我们使用了 单个参数独立绑定 的方式， 为我们的 greeting 应用绑定了 name 和 age 参数。
这种方式有个很明显的缺点， 如果应用参数的数量较多（比如说几十个） 的时候， 就会出现庞大的参数列表， 可读性 和 维护性 都会变得很差。
var ( name string age int ) func init() { root.Flags().StringVarP(&amp;amp;name, &amp;#34;name&amp;#34;, &amp;#34;n&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;名字&amp;#34;) root.Flags().IntVarP(&amp;amp;age, &amp;#34;age&amp;#34;, &amp;#34;a&amp;#34;, 20, &amp;#34;名字&amp;#34;) } 因此在生产中， 我们常常会选择 配置 文件来进行 参数/变量 的管理。 例如作业要求中提到的 YAML 或者 JSON 文件。</description>
    </item>
    
    <item>
      <title>3. 交互式命令</title>
      <link>https://typonotes.com/books/golang/cobra-in-action/03-interactive-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/cobra-in-action/03-interactive-command/</guid>
      <description>原文链接: https://tangx.in/posts/2023/01/26/devopscamp-cobra-interactive-survey/
本文为 DevOpsCamp 实战训练作业 cobra - 03 配置文件的读取与写入（简单） 的解题答案
DevoOpsCamp 作业地址： https://www.devopscamp.cc/semi-plan-202301-2/posts/homework/cobra03/
作业: cobra - 03 交互式命令 要求:
使用 https://github.com/spf13/cobra 实现命令工具
使用 https://github.com/go-survey/survey 实现交互式命令
实现 Demo 效果
除了官方效果之外， 我还发现了 aliyun 命令行工具在配置账户的时候使用的是 交互式 ， 如下
为了更好的体现 实战性， 我们将以 aliyun configure --profile 的作为例子， 并进行一些优化。
解题过程 1. 安装 survey 依赖 这是一个意外收获， survey 库的 Github 地址与 go module 名称不一致。 同时， survey 版本还是 v2 了。
关于 go module version ， 参考文章： https://go.dev/doc/modules/version-numbers
话说回来， 虽然 github 仓库地址是 https://github.</description>
    </item>
    
    <item>
      <title>4. 项目的目录结构</title>
      <link>https://typonotes.com/books/golang/cobra-in-action/04-layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/cobra-in-action/04-layout/</guid>
      <description>Go 项目的目录结构 Go 项目的目录结构， 通常都会参考该项目 Go语言规范/项目结构 - Github 。
这是一个社区规范， 遵守这个规范， 大家都会很轻松。 但并不是严格的 Go 语言标准， 实际操作中各个公司可能会有自己的标准。
另外， 在上述的 Github 仓库中可以看到， 所有 目录功能 都只有一层。 这样就意味着在实际使用时我们是可以自由组合。 只要遵守该层的功能约定就可以了。
例如， 使用 cobra 时， 用于管理命令的 cmd 目录， 位置可以是
/cmd/appname/cmd # 或 /pkg/cmd/ # 或 /internal/pkg/cmd # 或 /pkg/internal/cmd 关于这个没有必要钻牛角尖， 只要是一群相对固定的维护人员认同的约定， 就可以了。
internal 包 internal 包是是特殊的， 也是 Go 语言规范 强制 约束的。
首先， 它的目录位置不是固定的， 和其他包一样。 其次， 它的访问是受限的， 只有和他有 近亲亲属关系 的路径才能访问。 举个例子， 代码在 https://github.com/tangx-labs/go-internal-demo
代码目录树如下
限制访问 在上图中, 其中 (2) 的调用因为没有权限被限制</description>
    </item>
    
    <item>
      <title>5. 子命令与Cobra命令树的实现</title>
      <link>https://typonotes.com/books/golang/cobra-in-action/05-1-command-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/cobra-in-action/05-1-command-tree/</guid>
      <description>cobra 的子命令 在 cobra 中， 每个 命令 都是独立的。 通过 parent.AddCommand(children) 的形式进行串连。
var root = &amp;amp;cobra.Command{} var child = &amp;amp;cobra.Command{} func init() { root.AddCommand(child) } 没了， 应用上就这么多。
cobra 命令树 如果你用过 gin 的路由树的话， 可能会对 cobra 的命令树实现更为深刻。
删除多余的结构， cobra 节点 就是下面这样的。
type Command struct { // 子命令 commands []*Command // 父命令 parent *Command } 当进行 命令树 组合的时候， 是通过 领养/挂靠 的方式实现的。
// AddCommand adds one or more commands to this parent command. func (c *Command) AddCommand(cmds .</description>
    </item>
    
    <item>
      <title>5.2 gin 路由树的实现(扩展)</title>
      <link>https://typonotes.com/books/golang/cobra-in-action/05-2-gin-router-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/cobra-in-action/05-2-gin-router-tree/</guid>
      <description>gin 的路由树 与 cobra 相比， gin 的路由树实现就是另外一种方式了， 我称之为 生长。 换句话说， gin 路由的子节点不能独立于父节点 单独 定义。
// Group creates a new router group. You should add all the routes that have common middlewares or the same path prefix. // For example, all the routes that use a common middleware for authorization could be grouped. func (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup { return &amp;amp;RouterGroup{ Handlers: group.combineHandlers(handlers), basePath: group.calculateAbsolutePath(relativePath), engine: group.engine, } } 从上面代码可以看出来， RouterGroup 是通过 Group 方法实现路由节点 生长 的， 在调用 Group 方法的时候，</description>
    </item>
    
    <item>
      <title>6. 持久化命令与Go引用类型的使用</title>
      <link>https://typonotes.com/books/golang/cobra-in-action/06-persistent-flag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://typonotes.com/books/golang/cobra-in-action/06-persistent-flag/</guid>
      <description>DevOpsCamp第2期：从 《cobra - 06 持久化命令》 开始聊聊 Go语言 指针类型的使用注意事项 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。
状态: 未更新
原文链接: https://typonotes.com/posts/2023/02/19/devopscamp-cobra-06-persistent-run-and-flags/
嗯， 在 cobra 中提供了一种叫做 Persistent 的 状态， 定向支持 函数 与 参数。
下面这段代码是是使用时的定义。
var root = &amp;amp;cobra.Command{ Use: &amp;#34;root&amp;#34;, // Persistent Run (1) PersistentPreRun: func(cmd *cobra.Command, args []string) { fmt.Println(&amp;#34;PersistentPreRun in root&amp;#34;) }, Run: func(cmd *cobra.Command, args []string) { _ = cmd.Help() }, } var config string func init() { // Persistent Flag (2) root.</description>
    </item>
    
  </channel>
</rss>
